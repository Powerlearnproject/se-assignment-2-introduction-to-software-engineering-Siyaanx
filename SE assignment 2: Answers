Assignment: Introduction to Software Engineering

1] Define Software Engineering:
    Software engineering is the systematic application of engineering principles, methods and tools in the development and maintenance of high-quality software systems.
Software engineering follows the journey of software applications from the designing, development, testing to the maintenance stage.

2] What is software engineering, and how does it differ from traditional programming? 
    Software engineering is the systematic application of engineering principles, methods and tools in the development and maintenance of high-quality software systems. Software engineering differs from traditional programming in terms of the development stage, approach and range of focus. Unlike the traditional programming that follows a rigid development stage, software engineering follows a flexible and iterative approach to the development of software applications where software is continuously improved based on feedback. 
Also, in the software engineering, the range of focus of software development is wider than that of traditional programming; software engineering involves iterative method of designing, development, testing and maintenance of software applications unlike traditional programming that involves the manual writing of codes in programming codes and finalizing design processes before actual implementation.
Software Development Life Cycle (SDLC) follows through the phase of gathering requirements, design, implementation, testing, deployment to the maintenance phase.

3] Software Development Life Cycle (SDLC): 
Explain the various phases of the Software Development Life Cycle. Provide a brief description of each phase. Agile vs. Waterfall Models:
    Software Development Life Cycle (SDLC) follows through the phase of gathering requirements, design, implementation, testing, deployment to the maintenance phase.
Requirement: This phase of the SDLC involves gathering of requirements for the software projects. These requirements include user needs, system requirements, etc
Design: This phase is the prototyping stage. It involves the creation of detailed designs for software architecture, user interface. It usually includes the wireframes of the software applications.
Implementation: This is the phase where the actual development of the software applications takes place. It involves writing codes and building the project based on design specifications.
Testing: This phase involves testing the software to ascertain that it meets quality standard and functional requirements.
Deployment: This phase involves making the software applications ready to customers (or users) for use.
Maintenance: This phase involves continuous improvement of the software application through support and updates (enhancement or addition of features, fixing bugs, etc.) 

4] Agile vs. Waterfall models: 
Compare and contrast the Agile and Waterfall models of software development. What are the key differences, and in what scenarios might each be preferred? 
    Agile model of software development follows an iterative and incremental approaches to software development, while waterfall model of software development 
follows a linear, sequential approach to software development through the SDLC. 
The key difference between agile and waterfall models are their approach to software development, predictability, adaptability to changes (project needs, scope creep) and team dynamics where agile model is flexible, waterfall model is rigid and where agile model fosters collaboration, waterfall model has some shortcomings.
Agile model might be preferred in fast-paced production environment with changing project and users’ needs (such as shopping platform dev.). And, the waterfall model might be preferred in scenarios with fixed project outline from start to finish.

5] Requirements Engineering:
What is requirements engineering? Describe the process and its importance in the software development lifecycle. 
    Requirements engineering is the process in software development lifecycle that involves establishing and documenting requirements for a software application project. The process of requirement engineering involves these various activities- elicitation, specification, analysis, verification and validation, and management. Five process of requirement engineering are feasibility study, requirement elicitation, requirement specification, requirements for verification and validation and requirement management.
Concisely, a project starts with the acquisition of requirements-its development and verification- as part of requirement engineering. This helps in ensuring that the software being developed meets the users’ or stakeholders’ needs. Also, requirement engineering helps in identify possible faults or issue with the software development process earlier, thus allowing for quick adjustments. Requirement engineering also fosters communication and collaboration between developers and stakeholders, thus facilitating software development in cost-effective and efficient manner.

References:
https://www.sciencedirect.com/topics/computer-science/requirement-engineering#
https://www.geeksforgeeks.org/software-engineering-requirements-engineering-process/

6] Software Design Principles:
Explain the concept of modularity in software design. How does it improve maintainability and scalability of software systems?
Modularity in software design refers to the practice of dividing software into separate, independent modules whereby each is responsible for a distinct feature or functionality. Modularity in software design is aimed at creating software in a way that minimizes dependencies among the components of a system, thus improving the maintainability, scalability and overall understanding of the software systems.
References:
https://www.ituonline.com/tech-definitions/what-is-modularity-in-software-design/

7] Testing in Software Engineering:
Describe the different levels of software testing (unit testing, integration testing, system testing, acceptance testing). Why is testing crucial in software development?  
The different levels of software testing:
Unit testing: This type of testing involves the testing of individual component and module of the software.
Integration testing: This involves testing the interaction between different components or subsystem of the software.
System testing: This involves the overall testing of the entire system as a whole.
Acceptance testing: This type of testing deals with testing the software against user requirements to ensure that the acceptance criteria based on users’ needs are ticked off.
Testing is essential in software development as this phase helps in ensuring that the software meets quality standards and functional requirements.

8] Version Control Systems:
What are version control systems, and why are they important in software development? Give examples of popular version control systems and their features.
Version control systems are software tools that track changes made to source codes. Version control systems are important in software development as they not only source codes changes but facilitate work coordination amongst development team members. Git and subversion are examples of version control system. 
Git is a distributed version control system with fast commit speeds. Git also support offline work mode. Git is flexible and advanced, however, with steeper learning curve. Apache subversion (commonly known as subversion) is a centralized version control system with files and data stored on central servers. It is beginner-friendly in terms of ease of use but with limited offline work mode. 
References
https://nulab.com/learn/software-development/git-vs-svn-version-control-system/

9] Software Project Management:
Discuss the role of a software project manager. What are some key responsibilities and challenges faced in managing software projects?
Software project manager is responsible for overseeing the planning, execution and delivery of software projects. Basically, a software project manager leads a development team in achieving all project goals within the specified time constraints. 
Some of the responsibilities of managing software projects are project monitoring and control, timely delivery of software projects, cost control, resource and risk management, quality assurance and ensuring stakeholder satisfaction. 
Challenges with managing software projects include poor planning and unrealistic deadlines, changing requirements (scope creep), resource allocation, project delay due to resource unavailability, lack of accountability (in team members), team communication issues, and many among others.
References:
https://www.koombea.com/blog/project-manager-challenges/

10] Software Maintenance:
Define software maintenance and explain the different types of maintenance activities. Why is maintenance an essential part of the software lifecycle?
Software maintenance is a phase in software development life cycle (SDLC) that deals with all the processes involved in ensuring continuous improvement of a software. This involves provision of continuous support, updates and enhancements after software deployment stage of the SDLC. Software maintenance is essential in software lifecycle to ensure seamless functioning and optimization of software systems which ensure overall satisfaction of the software product in the market.

11] Ethical Considerations in Software Engineering:

What are some ethical issues that software engineers might face? How can software engineers ensure they adhere to ethical standards in their work?
Some of the ethical issues that software engineers face are data privacy issues (i.e. corporate ownership of personal data), addictive design, issue of accessibility, algorithmic bias, weak cyber security, and overemphasis of features (act of prioritizing features over impact). 
Software engineers can adhere to ethical standards in their work by upholding the code of ethics in software engineering during planning, design, testing and maintenance phases of software development. 
These codes of ethics include:
•	Consideration of potential impacts of software projects on different stakeholders by accessing ethical implications of software purpose and functionality (to avoid harm or discrimination).
•	Ethical consideration during the design phase of software development in terms of accessibility, user experience and users’ data privacy.
•	Consideration of potential bias that may arise from use of software after deployment through thorough testing
•	Prioritizing software maintenance (through supports, updates and user feedback) to ensure that software adhere to current ethical standards.

References
https://www.techtarget.com/searchsoftwarequality/tip/5-examples-of-ethical-issues-in-software-development
https://x-team.com/blog/5-ethical-issues-in-software-development/
https://www.institutedata.com/blog/software-engineering-code-of-ethics/

 


